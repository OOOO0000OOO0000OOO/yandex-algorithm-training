/**
 * "24. Покупка билетов"
 * https://contest.yandex.ru/contest/45468/problems/24/
 * 
 * За билетами на премьеру нового мюзикла выстроилась очередь из N человек,
 * каждый из которых хочет купить 1 билет. На всю очередь работала только одна
 * касса, поэтому продажа билетов шла очень медленно, приводя «постояльцев»
 * очереди в отчаяние. Самые сообразительные быстро заметили, что, как правило,
 * несколько билетов в одни руки кассир продаёт быстрее, чем когда эти же
 * билеты продаются по одному. Поэтому они предложили нескольким подряд стоящим
 * людям отдавать деньги первому из них, чтобы он купил билеты на всех.
 * 
 * Однако для борьбы со спекулянтами кассир продавала не более 3-х билетов в
 * одни руки, поэтому договориться таким образом между собой могли лишь 2 или
 * 3 подряд стоящих человека.
 * 
 * Известно, что на продажу i-му человеку из очереди одного билета кассир
 * тратит Aᵢ секунд, на продажу двух билетов — Bᵢ секунд, трех билетов — Cᵢ
 * секунд. Напишите программу, которая подсчитает минимальное время, за которое
 * могли быть обслужены все покупатели.
 * 
 * Обратите внимание, что билеты на группу объединившихся людей всегда покупает
 * первый из них. Также никто в целях ускорения не покупает лишних билетов (то есть
 * билетов, которые никому не нужны).
 * 
 * На вход программы поступает сначала число N — количество покупателей в
 * очереди (1 ≤ N ≤ 5000). Далее идет N троек натуральных чисел Aᵢ, Bᵢ, Cᵢ.
 * Каждое из этих чисел не превышает 3600. Люди в очереди нумеруются, начиная
 * от кассы. 
 *
 * @param { [Number, Number, Number][] } people N троек чисел Aᵢ, Bᵢ, Cᵢ
 * @param n количество покупателей в очереди (1 ≤ N ≤ 5000)
 * 
 * @returns { Number } минимальное время в секундах, за которое могли быть
 * обслужены все покупатели
 */

const findMinTime = (people, n) => {
  let dp = [0, 0, 0];

  const [A, B, C] = [
    [Infinity, Infinity, Infinity, ...people.map(([a]) => a)],
    [Infinity, Infinity, Infinity, ...people.map(([, b]) => b)],
    [Infinity, Infinity, Infinity, ...people.map(([, , c]) => c)],
  ];

  for (let i = 0; i < n; i++) {
    dp[i + 3] = Math.min(
      dp[i + 2] + A[i + 3],
      dp[i + 1] + B[i + 2],
      dp[i] + C[i + 1],
    );
  }

  return dp[dp.length - 1];
};

const fs = require('fs');
const data = fs.readFileSync('input.txt', {
  encoding: 'utf-8',
});
const [[n], ...people] = data
  .trim()
  .split('\n')
  .map((line) => line.trim().split(' ').map(Number));

const result = findMinTime(people, n);

fs.writeFileSync('output.txt', result.toString());
