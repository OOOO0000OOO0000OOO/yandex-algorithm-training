/**
 * "1. Гистограмма"
 * https://contest.yandex.ru/contest/45468/problems/1/
 *
 * Вовочка ломает систему безопасности Пентагона. Для этого ему понадобилось узнать, какие
 * символы в секретных зашифрованных посланиях употребляются чаще других. Для удобства
 * изучения Вовочка хочет получить графическое представление встречаемости символов.
 * Поэтому он хочет построить гистограмму количества символов в сообщении. Гистограмма —
 * это график, в котором каждому символу, встречающемуся в сообщении хотя бы один раз,
 * соответствует столбик, высота которого пропорциональна количеству этих символов в
 * сообщении.
 *
 * @param { String } string 
 * Входной файл содержит зашифрованный текст сообщения. Он содержит строчные и прописные
 * латинские буквы, цифры, знаки препинания («.», «!», «?», «:», «-», «,», «;», «(», «)»),
 * пробелы и переводы строк. Размер входного файла не превышает 10000 байт. Текст содержит
 * хотя бы один непробельный символ. Все строки входного файла не длиннее 200 символов.
 *
 * @returns { String }
 * Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов
 * «#», количество которых должно быть равно количеству символов c в данном тексте. Под
 * каждым столбиком напишите символ, соответствующий ему. Отформатируйте гистограмму
 * так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец
 * были непустыми. Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке
 * увеличения кодов символов.
 */

function printHistogram(string) {
  const symbolCount = {};
  let maxSymbolCount = 0;

  for (const char of string) {
    if (!char.trim()) continue;

    symbolCount[char] = (symbolCount[char] ?? 0) + 1;
    maxSymbolCount = Math.max(
      maxSymbolCount,
      symbolCount[char],
    );
  }

  const sortedKeys = Object.keys(symbolCount).sort(
    (key1, key2) => key1.charCodeAt() - key2.charCodeAt(),
  );

  let graph = '';

  for (let row = maxSymbolCount; row > 0; row--) {
    for (const key of sortedKeys) {
      graph += symbolCount[key] >= row ? '#' : ' ';
    }
    graph += '\n';
  }

  graph += sortedKeys.join('');

  return graph;
}

const fs = require('fs');

const data = fs.readFileSync('input.txt', {
  encoding: 'utf-8',
});

const string = data.trim();

fs.writeFileSync('output.txt', printHistogram(string));
