/**
 * "D. Лавочки в атриуме"
 * https://contest.yandex.ru/contest/28738/problems/D/
 * 
 * В атриуме нового корпуса ФНК урбанисты установили модные гранитные лавочки (на
 * которых холодно сидеть зимой и жарко летом). Лавочка устроена следующим образом:
 * несколько одинаковых кубических гранитных блоков ставятся в ряд, а на них кладется
 * гранитная плита.
 * При этом блоки располагаются так, чтобы плита не падала: для этого достаточно, чтобы и
 * слева, и справа от центра плиты был хотя бы один гранитный блок или его часть (в
 * частности, если центр плиты приходится на середину какого-нибудь блока, то и слева, и
 * справа от центра плиты находится часть блока, и плита не падает).
 * На ФНК много певокурсников (но это только пока не произошли отчисления за списывания на
 * курсе ОиМП) и им не хватает стульев в аудиториях. Студенты обнаружили, что блоки можно
 * использовать в аудитории в качестве сиденья. Можно по одному вытаскивать блоки,
 * находящиеся с краю (как слева, так и справа). Они хотят вытащить из-под лавочки как можно
 * больше блоков так, чтобы она при этом не упала (передвигать оставшиеся блоки нельзя).
 * Определите, какие блоки они должны оставить.
 * 
 * @param { Number } l натуральное число — длина лавочки, l <= 10000
 * @param { Number } k натуральное число — количество гранитных блоков-ножек, k <= 10000
 * @param { Number[] } legs k различных целых неотрицательных чисел, задающих положение
 * каждой ножки. Положение ножки определяется расстоянием от левого края плиты до левого
 * края ножки (ножка — это куб размером 1×1×1). Ножки перечислены слева направо (то есть
 * начиная с ножки с меньшим расстоянием до левого края).
 * 
 * @returns { String } ножки, которые студентам нужно оставить. Для каждой ножки нужно
 * выдать ее положение, как оно задано во входных данных. Ножки следует перечислять слева
 * направо, в том порядке, в котором они встречаются во входных данных.
 */

const findBlocksToStay = (l, k, legs) => {
  const center = Math.floor(l / 2);

  let left = legs[0];

  for (let i = 1; i < k; i++) {
    if (legs[i] < center) {
      left = legs[i];
    } else if (l % 2 && legs[i] === center) {
      return `${legs[i]}`;
    } else {
      return `${legs[i - 1]} ${legs[i]}`;
    }
  }

  return `${left}`;
};

export default findBlocksToStay;

